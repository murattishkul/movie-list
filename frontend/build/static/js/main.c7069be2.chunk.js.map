{"version":3,"sources":["../node_modules/jspdf/dist sync","Navbar.jsx","MovieLists.jsx","MovieList.jsx","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Navbar","className","src","alt","onClick","window","open","endpoint","MaterialTableDemo","props","delete","oldData","axios","headers","then","setState","prevState","data","splice","indexOf","catch","err","console","log","update","add","newData","fetch","method","Accept","body","JSON","stringify","title","push","response","state","columns","field","type","get","resp","this","editable","onRowAdd","Promise","setTimeout","onRowUpdate","onRowDelete","onRowClick","event","rowData","history","pathname","search","detail","options","actionsColumnIndex","style","width","React","Component","withRouter","MovieList","location","useLocation","useState","useEffect","name","App","path","component","exact","MovieLists","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c7069be2.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 323;","import React, { useEffect, useState } from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  //   const [show, handleShow] = useState(false);\n  //   useEffect(() => {\n  //     window.addEventListener(\"scroll\", () => {\n  //       if (window.scrollY > 100) {\n  //         handleShow(true);\n  //       } else handleShow(false);\n  //       return () => {\n  //         window.removeEventListener(\"scroll\");\n  //       };\n  //     });\n  //   }, []);\n\n  return (\n    <div className={`nav ${true && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://movielistnow.com/wp-content/uploads/2018/07/cropped-Cotidiano-3.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav__avatar\"\n        onClick={() => window.open(\"https://github.com/murattishkul\")}\n        src=\"https://avatars0.githubusercontent.com/u/38204149?s=460&u=0b3af45921a81a71c83045aa4c1ad86d796d8a62&v=4\"\n        alt=\"Netflix Logo\"\n      />\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport MaterialTable, { MTableRow } from \"material-table\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst endpoint =\n  \"https://secret-waters-01210.herokuapp.com/api/v1/movie_lists/\"; //\"http://localhost:3000/api/v1/movie_lists\";\n\nclass MaterialTableDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: \"Name\", field: \"title\" },\n        { title: \"Movie number\", field: \"movieNumber\", type: \"numeric\" },\n      ],\n      data: [\n        // { name: \"Tarantino best\", movieNumber: \"2\" },\n        // {\n        //   name: \"Funny\",\n        //   movieNumber: 5,\n        // },\n        // {\n        //   name: \"Kazaksha movies\",\n        //   movieNumber: 3,\n        // },\n      ],\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"this is comp did mount\");\n    axios\n      .get(endpoint)\n      .then((resp) => {\n        console.log(resp);\n        const { data } = resp.data;\n        this.setState({ ...this.state, data: data });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  delete = (oldData) => {\n    axios\n      .delete(endpoint + \"/\" + oldData.id, {\n        headers: { \"Access-Control-Allow-Origin\": \"*\" },\n      })\n      .then(() => {\n        this.setState((prevState) => {\n          const data = [...prevState.data];\n          data.splice(data.indexOf(oldData), 1);\n          return { ...prevState, data };\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  update = () => {};\n\n  add = (newData) => {\n    fetch(endpoint + \"/\", {\n      method: \"post\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title: \"Best of Tarantino\" }),\n    })\n      .then(() => {\n        this.setState((prevState) => {\n          const data = [...prevState.data];\n          data.push(newData);\n          return { ...prevState, data };\n        });\n      })\n      .catch((err) => {\n        console.log(err.response);\n      });\n  };\n\n  render() {\n    const state = this.state;\n    console.log(state);\n    return (\n      <MaterialTable\n        title=\"Movie List\"\n        columns={state.columns}\n        data={state.data}\n        editable={{\n          onRowAdd: (newData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n                this.add(newData);\n                console.log(newData);\n              }, 600);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n                if (oldData) {\n                  this.setState((prevState) => {\n                    const data = [...prevState.data];\n                    data[data.indexOf(oldData)] = newData;\n                    return { ...prevState, data };\n                  });\n                }\n              }, 600);\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n                console.log(oldData);\n                this.delete(oldData);\n              }, 600);\n            }),\n        }}\n        onRowClick={(event, rowData) => {\n          console.log(\"this is rowdata\", rowData);\n          this.props.history.push({\n            pathname: \"/list\",\n            search: \"\",\n            state: { detail: rowData },\n          });\n        }}\n        options={{ actionsColumnIndex: -1 }}\n        style={{ width: \"100%\" }}\n      />\n    );\n  }\n}\nexport default withRouter(MaterialTableDemo);\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport MaterialTable, { MTableRow } from \"material-table\";\n\nconst MovieList = (props) => {\n  const location = useLocation();\n  const [state, setState] = useState({\n    columns: [\n      { title: \"Name\", field: \"name\" },\n      { title: \"Movie number\", field: \"movieNumber\", type: \"numeric\" },\n    ],\n    data: [\n      // { name: \"Tarantino best\", movieNumber: \"2\" },\n    ],\n  });\n\n  useEffect(() => {\n    console.log(location.pathname); // result: '/secondpage'\n    console.log(location.search); // result: '?query=abc'\n    console.log(location.state.detail); // result: 'some_value'\n  }, [location]);\n\n  return (\n    <MaterialTable\n      title={location.state.detail.name}\n      columns={state.columns}\n      data={state.data}\n      editable={{\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              this.setState((prevState) => {\n                const data = [...prevState.data];\n                data.push(newData);\n                return { ...prevState, data };\n              });\n            }, 600);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              if (oldData) {\n                this.setState((prevState) => {\n                  const data = [...prevState.data];\n                  data[data.indexOf(oldData)] = newData;\n                  return { ...prevState, data };\n                });\n              }\n            }, 600);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              this.setState((prevState) => {\n                const data = [...prevState.data];\n                data.splice(data.indexOf(oldData), 1);\n                return { ...prevState, data };\n              });\n            }, 600);\n          }),\n      }}\n      //   onRowClick={(event, rowData) => {\n      //     console.log(rowData);\n      //     this.props.history.push({\n      //       pathname: \"/list\",\n      //       search: \"\",\n      //       state: { detail: rowData.tableData },\n      //     });\n      //   }}\n      options={{ actionsColumnIndex: -1 }}\n      style={{ width: \"100%\" }}\n    />\n  );\n};\n\nexport default MovieList;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./Navbar\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport MovieLists from \"./MovieLists\";\nimport MovieList from \"./MovieList\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Router>\n        <Switch>\n          <Route path={`/list`} component={MovieList} />\n          <Route exact path=\"/\" component={MovieLists} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}